.. _buttons:

=================
Button Behaviors
=================

In this project, we'll look at button states like hover, pressed, and clicked, as well as how buttons can be used to provide users with control over states of other elements of our programs.

In the code below, we create a very simple program with 2 rectangles to explore how to design a button. We want the button to respond to the user's mouse when the mouse interacts with the button's rectangular area to give the user indication that the button is interactive. We will have 2 types of dynamic behavior in this project, one set of behaviors relate to how the button rectangle and circle change with mouse interaction.  Then, we need to have the button change the state of the blue rectangle, using the global state variable ``rectState`` ::

	int rectState=1;  //state variable to control fill color of rectangle

	void setup(){
		size(250,150);
	}
	
	void draw(){
	  	background(255);
	  	switch(rectState){
	    	case 0: 
	     		fill(0,0,255);  //blue
	     		break;
	    	case 1: 
	    		fill(150, 150,250);  //light blue
	    		break;
			default:
				fill(100);  // if neither state, have a gray rectangle
				break;
		}
		rect(10,10,100,100);  // draw rectangle which will be controlled by button
		drawButton(150,40,50,50);
	}

 	void drawButton(float xPos, float yPos, float bWidth, float bHeight){
    	fill(100);
    	stroke(20);
    	strokeWeight(3);
    	rect(xPos,yPos,bWidth,bHeight);
    	fill(255,0,0);
    	ellipse(xPos+25,yPos+25,bWidth-5,bHeight-5);
	}
	
The ``switch`` statement provides a variation on the conditional branching structure, we could use ``if()``, ``else``, but for some situations, ``switch`` provides a cleaner, simpler structure.

Our code currently creates this program display:

.. image:: /images/button1.png

MouseOver
==========

Now we need to create code that will respond to a user's mouse being over the rectangle, so let's create a function to test if the mouse is over the button. The function input parameters will be the button's position and shape, we want to have it return a ``boolean true or false value`` ::

	boolean isMouseOver(float xPos, float yPos, float bWidth, float bHeight){
	     if(mouseX> xPos && mouseX < xPos + bWidth && mouseY > yPos && mouseY < yPos+bHeight){
				return true;
		}
		return false;
	}
	
Responsive Button
==================

Now we need to use our ``isMouseOver`` function to add some interaction feedback to the user.  We will consider 4 different states of our button where we will consider that our button has toggle behavior, this means that it changes state from active to default every time the user clicks on it:  
 
	- **default**: button is inactive
	- **hover**:  the mouse is over the button, but not pressed or clicked
	- **pressed**:  the mouse is over the button and is being pressed
	- **clicked**:  the user clicked on the button to put it in the active state.





